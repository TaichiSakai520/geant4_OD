#define ENRICH 0
#define NA 1

// ===========================================================================
//                         DetectorConstruction.cc
// ===========================================================================
#include "DetectorConstruction.hh"
//#include "OBDCalorimeterSD.hh"
#include "G4Material.hh"
#include "G4Box.hh"
#include "G4LogicalVolume.hh"
#include "G4VPhysicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4VisAttributes.hh"
#include "G4SystemOfUnits.hh"
#include "G4Tubs.hh"
#include "G4UnionSolid.hh"
#include "G4SubtractionSolid.hh"
#include "G4IntersectionSolid.hh"
#include "G4Sphere.hh"
#include "G4NistManager.hh"

#include "G4Colour.hh"
#include "G4SDManager.hh"
#include "G4OpticalSurface.hh"
#include "G4LogicalBorderSurface.hh"
#include "G4LogicalSkinSurface.hh"

// ===========================================================================
//                            class description
// ===========================================================================

/////////////////////////////////////////////
DetectorConstruction::DetectorConstruction()
/////////////////////////////////////////////
{
}

/////////////////////////////////////////////
DetectorConstruction::~DetectorConstruction()
/////////////////////////////////////////////
{
}
/////////////////////////////////////////////
void DetectorConstruction::DefineMaterials()
/////////////////////////////////////////////
{
  G4String symbol;
  G4double a, z, density; // a = means mass of a moll, z = means # of protons
#if ENRICH                // for enrichment
  G4int iz, n;            // iz = # of protons in an isotope
                          // n = # of nucleons in an iaotope
  G4double abundance;
#endif
  G4int ncomponents, natoms;
  G4double fractionmass;
  G4double /*density_0,*/ density_1, density_2;

  // define Elements
  G4Element *H = new G4Element("Hydrogen", symbol = "H", z = 1., a = 1.01 * g / mole);

  G4Element *C = new G4Element("Carbon", symbol = "C", z = 6., a = 12.01 * g / mole);

  G4Element *N = new G4Element("Nitrogen", symbol = "N", z = 7., a = 14.01 * g / mole);
  G4Element *O = new G4Element("Oxygen", symbol = "O", z = 8., a = 16.00 * g / mole);
  G4Element *Fe = new G4Element("Iron", symbol = "Fe", z = 26., a = 55.85 * g / mole);

#if NA
  //G4Element* Li = new G4Element("Lithium" , symbol="Li" , z = 3.,  a = 6.94*g/mole);
  //G4double enrich_fraction = 0.0759;
#endif
  //Get pointer to 'Material Manager'
  G4NistManager *materi_Man = G4NistManager::Instance();
  //Get stainless_steel
  //G4Material *stainless_steel = materi_Man->FindOrBuildMaterial("G4_STAINLESS-STEEL");
  G4Material *stainless_steel = materi_Man->FindOrBuildMaterial("G4_STAINLESS-STEEL");
  G4Material *glass_n = materi_Man->FindOrBuildMaterial("G4_GLASS_PLATE");
  G4Material *Cu_NIST = materi_Man->FindOrBuildMaterial("G4_Cu");
  G4Material *air = materi_Man->FindOrBuildMaterial("G4_AIR");
  //std::cout << stainless_steel << std::endl;
  // for enrichment
  G4Material *stainless = new G4Material("stainless", density = 8.0 * g / cm3, ncomponents = 1);
  stainless->AddElement(Fe, natoms = 1);

  // define a material from elements.   case 1: chemical molecule

  // Pseudo-cumene -- (C9 H12) also called 1,2,4-Trimethybenzene

  G4Material *PC = new G4Material("PC", density = 0.8758 * g / cm3, ncomponents = 2);
  PC->AddElement(C, natoms = 9);
  PC->AddElement(H, natoms = 12);

  // Polyoxyethylene(10) Octylephenyl Ether -- (C8H17C6H4O(CH2CH2O)10H) -> Triton-X-100
  G4Material *POE = new G4Material("POE", density = 1.07 * g / cm3, ncomponents = 3);
  POE->AddElement(C, natoms = 34);
  POE->AddElement(H, natoms = 62);
  POE->AddElement(O, natoms = 11);

  // PPO -- (C15 H11 N 0) also called DPO, 2,5-diphenyloxazole
  G4Material *PPO = new G4Material("PPO", density = 1.00 * g / cm3, ncomponents = 4);
  PPO->AddElement(C, natoms = 15);
  PPO->AddElement(H, natoms = 11);
  PPO->AddElement(N, natoms = 1);
  PPO->AddElement(O, natoms = 1);

  // bis_MSB -- (C24 H22) also called bis-MSB, 1,4-Bis(2-methylstyryl)benzene
  G4Material *bis_MSB = new G4Material("bis_MSB", density = 1.00 * g / cm3, ncomponents = 2);
  bis_MSB->AddElement(C, natoms = 24);
  bis_MSB->AddElement(H, natoms = 22);

  // LiBr
  //G4Material* LiBr = new G4Material("LiBr", density=3.460*g/cm3, ncomponents=2);
  //LiBr -> AddElement(Li,  natoms=1);
  //LiBr -> AddElement(Br,  natoms=1);

  // Water -- (H2O)
  G4Material *Water = new G4Material("Water", density = 1.00 * g / cm3, ncomponents = 2);
  Water->AddElement(H, natoms = 2);
  Water->AddElement(O, natoms = 1);
  //Carbon
  G4Material *C_M = new G4Material("Carbon_M", z = 6.0, a = 12.01 * g / mole, density = 1.8 * g / cm3);

  // My Cocktail
  G4double ratio_PC = 0.6;  // <setting value>
  G4double ratio_POE = 0.4; // <setting value>

  density_1 = (((0.8758 * ratio_PC * 1e3) + (1.07 * ratio_POE * 1e3) + 2.0 + 0.5) / 1000) * g / cm3;
  G4double PPO_fraction = 2.0 * g / (1e3 * cm3 * density_1); // 2.0 g/l  <setting value>
  //G4double bis_fraction = 0.5 * g / (1e3 * cm3 * density_1); // 0.5 g/l  <setting value>
  G4double bis_fraction = 0 * g / (1e3 * cm3 * density_1);
  G4Material *Cocktail = new G4Material("Cocktail", density_1, ncomponents = 3);
  Cocktail->AddMaterial(PC, fractionmass = ratio_PC / (1.0 + PPO_fraction + bis_fraction));
  Cocktail->AddMaterial(POE, fractionmass = ratio_POE / (1.0 + PPO_fraction + bis_fraction));
  Cocktail->AddMaterial(PPO, fractionmass = PPO_fraction / (1.0 + PPO_fraction + bis_fraction));
  // Cocktail->AddMaterial(bis_MSB, fractionmass = bis_fraction / (1.0 + PPO_fraction + bis_fraction));

  // LS = (LiBrWater) + (cocktail) -- Water includ : 16%
  G4double Water_ratio = 0.2; // <setting value>
  G4double LiBrWater_fraction = 1.0 / (1.0 + (0.3487 / Water_ratio));
  G4double Cocktail_fraction = 1.0 - LiBrWater_fraction;

  //density_2 = density_0*LiBrWater_fraction + density_1*Cocktail_fraction;

  G4double atm = 101300 * pascal;

  density_2 = 1.00 * 0.2 + density_1 * 0.8;
  G4Material *LS = new G4Material("LS", 0.78 * 1.05 * g / cm3, ncomponents = 1, kStateLiquid, 276 * kelvin, 201 * atm);
  LS->AddMaterial(Cocktail, fractionmass = 1);

  //stainless=(stainless_steel)+(carbon)--carbon include : 1%
  /*
  G4Material *stainless = new G4Material("stainless", 7.938 * g / cm3, ncomponents = 2, kStateSolid, 276 * kelvin, 201 * atm);
  stainless->AddMaterial(stainless_steel, fractionmass = 0.99);
  stainless->AddMaterial(C_M, fractionmass = 0.01);
*/
  G4Material *Copper = new G4Material("Copper", 8.96 * g / cm3, ncomponents = 1, kStateSolid, 276 * kelvin, 201 * atm);
  Copper->AddMaterial(Cu_NIST, fractionmass = 1);

  G4Material *glass = new G4Material("glass", 2.4 * g / cm3, ncomponents = 1, kStateSolid, 276 * kelvin, 201 * atm);
  glass->AddMaterial(glass_n, 1);
}

////////////////////////////////////////////////////
G4VPhysicalVolume *DetectorConstruction::Construct()
////////////////////////////////////////////////////
{
  // define materials
  DefineMaterials();

  G4Material *mate;
  G4VisAttributes *va;
  G4Material *materi_stainless;
  materi_stainless = G4Material::GetMaterial("stainless");

  G4Material *materi_glass;
  materi_glass = G4Material::GetMaterial("glass");
  G4Material *materi_LS;
  materi_LS = G4Material::GetMaterial("LS");
  // ==============================================================
  //                          world volume
  // ==============================================================

  double x = 200 * mm;
  double y = 200 * mm;
  double z = 200 * mm;
  G4Box *solid_world = new G4Box("solid_world", x / 2, y / 2, z / 2);
  G4Material *materi_world;
  materi_world = G4Material::GetMaterial("G4_AIR");
  G4LogicalVolume *logVol_world = new G4LogicalVolume(solid_world, materi_world, "logVol_world");
  G4PVPlacement *world = new G4PVPlacement(0, G4ThreeVector(), "physVol_world", logVol_world, 0, false, 0);
  logVol_world->SetVisAttributes(new G4VisAttributes(FALSE, G4Colour(0, 1, 0)));
  // ==============================================================
  //                           upper lid
  // ==============================================================
  //double diameter = 60.5 * mm;
  double diameter = 114 * mm;
  double height = 17.5 * mm;
  G4Tubs *Solid_upper = new G4Tubs("Solid_upper", 0., diameter / 2.0, height / 2.0, 0., 360. * deg);

  // G4LogicalVolume *logVol_upper = new G4LogicalVolume(Solid_De, materi_stainless, "logVol_upper");

  // ==============================================================
  //                           long pipe
  // ==============================================================
  double inner_diameter = 4.35 * mm;
  double outer_diameter = 6.35 * mm;
  height = 180 * mm;
  G4Tubs *Solid_long_pipe = new G4Tubs("Solid_upper", inner_diameter / 2, outer_diameter / 2.0, height / 2.0, 0., 360. * deg);
  // G4LogicalVolume *logVol_long_pipe = new G4LogicalVolume(Solid_De, materi_stainless, "logVol_long_pipe");
  // ==============================================================
  //                           short pipe
  // ==============================================================
  inner_diameter = 4.35 * mm;
  outer_diameter = 6.35 * mm;
  height = 80 * mm;
  G4Tubs *Solid_short_pipe = new G4Tubs("Solid_upper", inner_diameter / 2, outer_diameter / 2.0, height / 2.0, 0., 360. * deg);
  //G4LogicalVolume *logVol_short_pipe = new G4LogicalVolume(Solid_De, materi_stainless, "logVol_short_pipe");

  // ==============================================================
  //                          lid with pipe
  // ==============================================================

  G4VSolid *union1 = new G4UnionSolid("union1", Solid_upper, Solid_short_pipe, 0, G4ThreeVector(0 * mm, (-15 + 6.35 / 2) * mm, 3.75 * mm));
   G4VSolid *union2 = new G4UnionSolid("union2", union1, Solid_short_pipe, 0, G4ThreeVector((15 - 6.35 / 2) * mm, (15 - 6.35 / 2) * mm, 3.75 * mm));
   G4VSolid *lid = new G4UnionSolid("union3", union2, Solid_long_pipe, 0, G4ThreeVector(-(15 - 6.35 / 2) * mm, (15 - 6.35 / 2) * mm, -(17.5 / 2 + 2.5) * mm));

  // ==============================================================
  //                              tank
  // ==============================================================
  inner_diameter = 54.9 * mm;
  outer_diameter = 60.5 * mm;
  height = 100 * mm;
  G4Tubs *Solid_tank = new G4Tubs("Solid_upper", inner_diameter / 2, outer_diameter / 2.0, height / 2.0, 0., 360. * deg);

  // ==============================================================
  //                          tank(thick part)
  // ==============================================================
  inner_diameter = 60.5 * mm;
  outer_diameter = 114 * mm;
  height = 17.4 * mm;
  G4Tubs *Solid_thick = new G4Tubs("Solid_upper", inner_diameter / 2, outer_diameter / 2.0, height / 2.0, 0., 360. * deg);

  G4VSolid *Solid_tank_thick1 = new G4UnionSolid("Solid_tank_thick1", Solid_tank, Solid_thick, 0, G4ThreeVector(0 * mm, 0 * mm, (50 - 17.4 / 2) * mm));
  G4VSolid *Solid_tank_thick2 = new G4UnionSolid("Solid_tank_thick2", Solid_tank_thick1, Solid_thick, 0, G4ThreeVector(0 * mm, 0 * mm, -(50 - 17.4 / 2) * mm));
  //G4LogicalVolume *logVol_tank = new G4LogicalVolume(Solid_De, materi_De, "logVol_uppser");

  // ==============================================================
  //                          view port(SUS)
  // ==============================================================
  //double diameter = 60.5 * mm;
  inner_diameter = 63 * mm;
  outer_diameter = 114 * mm;
  height = 17.4 * mm;
  G4Tubs *Solid_viewSUS = new G4Tubs("Solid_viewSUS", inner_diameter / 2, outer_diameter / 2.0, height / 2.0, 0., 360. * deg);

  // ==============================================================
  //                      equipment(with out glass)
  // ==============================================================
  G4VSolid *lid_tank = new G4UnionSolid("lid_tank", Solid_tank_thick2, lid, 0, G4ThreeVector(0 * mm, 0 * mm, (50 + 17.5 / 2) * mm));
  G4VSolid *Solid_equipment = new G4UnionSolid("Solid_equipment", lid_tank, Solid_viewSUS, 0, G4ThreeVector(0 * mm, 0 * mm, -(50 + 17.4 / 2) * mm));
  G4LogicalVolume *LogVol_equipment = new G4LogicalVolume(Solid_equipment, materi_stainless, "LogVol_equipment");
  G4PVPlacement *PhysVol_equipment = new G4PVPlacement(0, G4ThreeVector(), "PhysVol_equipment", LogVol_equipment, world, false, 0, true);
  LogVol_equipment->SetVisAttributes(new G4VisAttributes(FALSE, G4Colour(0, 1, 0)));

  // ==============================================================
  //                          view port(glass)
  // ==============================================================
  diameter = 63 * mm;
  height = 4.5 * mm;
  G4Tubs *Solid_viewglass = new G4Tubs("Solid_viewglass", 0., diameter / 2.0, height / 2.0, 0., 360. * deg);
  G4LogicalVolume *LogVol_glass = new G4LogicalVolume(Solid_viewglass, materi_glass, "LogVol_glass");
  G4PVPlacement *PhysVol_glass = new G4PVPlacement(0, G4ThreeVector(0 * mm, 0 * mm, -(50 + 15.15) * mm), "PhysVol_glass", LogVol_glass, world, false, 2000, true);
  LogVol_glass->SetVisAttributes(new G4VisAttributes(FALSE, G4Colour(1, 0, 0)));

  // ==============================================================
  //                                 LS
  // ==============================================================

  diameter = 54.9 * mm;
  height = 78 * mm;
  G4Tubs *Solid_LS = new G4Tubs("Solid_LS", 0., diameter / 2.0, height / 2.0, 0., 360. * deg);
  G4VSolid *Solid_LS_e = new G4SubtractionSolid("Solid_LS_e", Solid_LS, Solid_equipment, 0, G4ThreeVector(0 * mm, 0 * mm, 23.9 * mm));
  G4LogicalVolume *LogVol_LS = new G4LogicalVolume(Solid_LS_e, materi_LS, "LogVol_LS");
  G4PVPlacement *PhysVol_LS = new G4PVPlacement(0, G4ThreeVector(0 * mm, 0 * mm, -23.9 * mm), "PhysVol_LS", LogVol_LS, world, false, 1000, true);
  LogVol_LS->SetVisAttributes(new G4VisAttributes(TRUE, G4Colour(1, 1, 0)));
  // ==============================================================
  //                          optical feature
  // ==============================================================
  G4double photonEnergy[] =
      {2.034 * eV, 2.068 * eV, 2.103 * eV, 2.139 * eV,
       2.177 * eV, 2.216 * eV, 2.256 * eV, 2.298 * eV,
       2.341 * eV, 2.386 * eV, 2.433 * eV, 2.481 * eV,
       2.532 * eV, 2.585 * eV, 2.640 * eV, 2.697 * eV,
       2.757 * eV, 2.820 * eV, 2.885 * eV, 2.954 * eV,
       3.026 * eV, 3.102 * eV, 3.181 * eV, 3.265 * eV,
       3.353 * eV, 3.446 * eV, 3.545 * eV, 3.649 * eV,
       3.760 * eV, 3.877 * eV, 4.002 * eV, 4.136 * eV};

  const G4int nEntries = sizeof(photonEnergy) / sizeof(G4double);

  G4double refractiveIndex1[] =
      {1.3435, 1.344, 1.3445, 1.345, 1.3455,
       1.346, 1.3465, 1.347, 1.3475, 1.348,
       1.3485, 1.3492, 1.35, 1.3505, 1.351,
       1.3518, 1.3522, 1.3530, 1.3535, 1.354,
       1.3545, 1.355, 1.3555, 1.356, 1.3568,
       1.3572, 1.358, 1.3585, 1.359, 1.3595,
       1.36, 1.3608};

  assert(sizeof(refractiveIndex1) == sizeof(photonEnergy));

  G4double absorption[] =
      {3.448 * m, 4.082 * m, 6.329 * m, 9.174 * m, 12.346 * m, 13.889 * m,
       15.152 * m, 17.241 * m, 18.868 * m, 20.000 * m, 26.316 * m, 35.714 * m,
       45.455 * m, 47.619 * m, 52.632 * m, 52.632 * m, 55.556 * m, 52.632 * m,
       52.632 * m, 47.619 * m, 45.455 * m, 41.667 * m, 37.037 * m, 33.333 * m,
       30.500 * m, 28.500 * m, 27.000 * m, 24.500 * m, 22.000 * m, 19.500 * m,
       17.500 * m, 14.500 * m};
  /*
  G4double absorption[] =
      {35 * cm, 35 * cm, 35 * cm, 35 * cm, 35 * cm, 35 * cm,
       35 * cm, 35 * cm, 35 * cm, 35 * cm, 35 * cm, 35 * cm,
       35 * cm, 35 * cm, 35 * cm, 35 * cm, 35 * cm, 35 * cm,
       35 * cm, 35 * cm, 35 * cm, 35 * cm, 35 * cm, 35 * cm,
       35 * cm, 35 * cm, 35 * cm, 35 * cm, 35 * cm, 35 * cm,
       35 * cm, 35 * cm};
       */
  assert(sizeof(absorption) == sizeof(photonEnergy));

  G4double scintilFast[] =
      {1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00,
       1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00,
       1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00,
       1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00,
       1.00, 1.00, 1.00, 1.00};

  assert(sizeof(scintilFast) == sizeof(photonEnergy));

  G4double scintilSlow[] =
      {0.01, 1.00, 2.00, 3.00, 4.00, 5.00, 6.00,
       7.00, 8.00, 9.00, 8.00, 7.00, 6.00, 4.00,
       3.00, 2.00, 1.00, 0.01, 1.00, 2.00, 3.00,
       4.00, 5.00, 6.00, 7.00, 8.00, 9.00, 8.00,
       7.00, 6.00, 5.00, 4.00};

  assert(sizeof(scintilSlow) == sizeof(photonEnergy));

  G4MaterialPropertiesTable *myMPT1 = new G4MaterialPropertiesTable();

  myMPT1->AddProperty("RINDEX", photonEnergy, refractiveIndex1, nEntries)
      ->SetSpline(true);
  myMPT1->AddProperty("ABSLENGTH", photonEnergy, absorption, nEntries)
      ->SetSpline(true);
  myMPT1->AddProperty("FASTCOMPONENT", photonEnergy, scintilFast, nEntries)
      ->SetSpline(true);
  myMPT1->AddProperty("SLOWCOMPONENT", photonEnergy, scintilSlow, nEntries)
      ->SetSpline(true);

  myMPT1->AddConstProperty("SCINTILLATIONYIELD", 1000. / MeV);
  myMPT1->AddConstProperty("RESOLUTIONSCALE", 1.0);
  myMPT1->AddConstProperty("FASTTIMECONSTANT", 1. * ns);
  myMPT1->AddConstProperty("SLOWTIMECONSTANT", 10. * ns);
  myMPT1->AddConstProperty("YIELDRATIO", 0.8);

  // G4double energy_water[] = {
  //     1.56962 * eV, 1.58974 * eV, 1.61039 * eV, 1.63157 * eV,
  //     1.65333 * eV, 1.67567 * eV, 1.69863 * eV, 1.72222 * eV,
  //     1.74647 * eV, 1.77142 * eV, 1.7971 * eV, 1.82352 * eV,
  //     1.85074 * eV, 1.87878 * eV, 1.90769 * eV, 1.93749 * eV,
  //     1.96825 * eV, 1.99999 * eV, 2.03278 * eV, 2.06666 * eV,
  //     2.10169 * eV, 2.13793 * eV, 2.17543 * eV, 2.21428 * eV,
  //     2.25454 * eV, 2.29629 * eV, 2.33962 * eV, 2.38461 * eV,
  //     2.43137 * eV, 2.47999 * eV, 2.53061 * eV, 2.58333 * eV,
  //     2.63829 * eV, 2.69565 * eV, 2.75555 * eV, 2.81817 * eV,
  //     2.88371 * eV, 2.95237 * eV, 3.02438 * eV, 3.09999 * eV,
  //     3.17948 * eV, 3.26315 * eV, 3.35134 * eV, 3.44444 * eV,
  //     3.54285 * eV, 3.64705 * eV, 3.75757 * eV, 3.87499 * eV,
  //     3.99999 * eV, 4.13332 * eV, 4.27585 * eV, 4.42856 * eV,
  //     4.59258 * eV, 4.76922 * eV, 4.95999 * eV, 5.16665 * eV,
  //     5.39129 * eV, 5.63635 * eV, 5.90475 * eV, 6.19998 * eV};

  //const G4int numentries_water = sizeof(energy_water) / sizeof(G4double);

  //assume 100 times larger than the rayleigh scattering for now.
  // G4double mie_water[] = {
  //     1670.244 * 100 * m, 1587.267 * 100 * m, 1507.42 * 100 * m,
  //     1430.625 * 100 * m, 1356.802 * 100 * m, 1285.874 * 100 * m,
  //     1217.763 * 100 * m, 1152.395 * 100 * m, 1089.695 * 100 * m,
  //     1029.588 * 100 * m, 972.0035 * 100 * m, 916.8686 * 100 * m,
  //     864.1133 * 100 * m, 813.6679 * 100 * m, 765.4642 * 100 * m,
  //     719.4346 * 100 * m, 675.5129 * 100 * m, 633.6336 * 100 * m,
  //     593.7325 * 100 * m, 555.7461 * 100 * m, 519.6124 * 100 * m,
  //     485.2700 * 100 * m, 452.6587 * 100 * m, 421.7194 * 100 * m,
  //     392.3939 * 100 * m, 364.6250 * 100 * m, 338.3568 * 100 * m,
  //     313.5341 * 100 * m, 290.1030 * 100 * m, 268.0103 * 100 * m,
  //     247.2042 * 100 * m, 227.6336 * 100 * m, 209.2488 * 100 * m,
  //     192.0007 * 100 * m, 175.8416 * 100 * m, 160.7245 * 100 * m,
  //     146.6038 * 100 * m, 133.4346 * 100 * m, 121.1733 * 100 * m,
  //     109.7770 * 100 * m, 99.20416 * 100 * m, 89.41407 * 100 * m,
  //     80.36711 * 100 * m, 72.02470 * 100 * m, 64.34927 * 100 * m,
  //     57.30429 * 100 * m, 50.85425 * 100 * m, 44.96467 * 100 * m,
  //     39.60210 * 100 * m, 34.73413 * 100 * m, 30.32937 * 100 * m,
  //     26.35746 * 100 * m, 22.78907 * 100 * m, 19.59588 * 100 * m,
  //     16.75064 * 100 * m, 14.22710 * 100 * m, 12.00004 * 100 * m,
  //     10.04528 * 100 * m, 8.339666 * 100 * m, 6.861063 * 100 * m};

  // assert(sizeof(mie_water) == sizeof(energy_water));

  // gforward, gbackward, forward backward ratio
  //G4double mie_water_const[3] = {0.99, 0.99, 0.8};

  // myMPT1->AddProperty("MIEHG", energy_water, mie_water, numentries_water)
  //->SetSpline(true);
  // myMPT1->AddConstProperty("MIEHG_FORWARD", mie_water_const[0]);
  // myMPT1->AddConstProperty("MIEHG_BACKWARD", mie_water_const[1]);
  // myMPT1->AddConstProperty("MIEHG_FORWARD_RATIO", mie_water_const[2]);

  //G4cout << "Water G4MaterialPropertiesTable" << G4endl;
  myMPT1->DumpTable();

  //set mpt to LS
  materi_LS->SetMaterialPropertiesTable(myMPT1);

  // Set the Birks Constant for the Water scintillator

  materi_LS->GetIonisation()->SetBirksConstant(0.126 * mm / MeV);

  //for reflect material
  G4OpticalSurface *OpSurface1 = new G4OpticalSurface("OpSurface1");
  //OpSurface1->SetModel(glisur);
  OpSurface1->SetModel(unified);
  OpSurface1->SetType(dielectric_metal);
  OpSurface1->SetFinish(polished);

  G4double refractiveIndex2[] =
      {0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
       0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
       0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
       0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
       0.000, 0.000, 0.000, 0.000};

  assert(sizeof(refractiveIndex2) == sizeof(photonEnergy));

  G4MaterialPropertiesTable *SMPT1 = new G4MaterialPropertiesTable();
  SMPT1->AddProperty("REFLECTIVITY", photonEnergy, refractiveIndex2, nEntries);

  // SMPT1->AddProperty("TRANSMITTANCE", photonEnergy, refractiveIndex2, nEntries);
  OpSurface1->SetMaterialPropertiesTable(SMPT1);

  //G4LogicalBorderSurface *Surface1 =
  //here surface definition
  //new G4LogicalBorderSurface("Surface1", PhysVol_LS, PhysVol_reflect, OpSurface1);
  new G4LogicalBorderSurface("Surface1", PhysVol_LS, PhysVol_equipment, OpSurface1);

  //for absorp material
  G4OpticalSurface *OpSurface2 = new G4OpticalSurface("OpSurface2");
  OpSurface2->SetModel(unified);
  OpSurface2->SetType(dielectric_metal);
  OpSurface2->SetFinish(polished);

  G4double efficiencyIndex2[] =
      {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
       1.0, 1.0, 1.0, 1.0};

  assert(sizeof(efficiencyIndex2) == sizeof(photonEnergy));

  G4double refractiveIndex3[] =
      {0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
       0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
       0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
       0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
       0.00, 0.00, 0.00, 0.00};

  assert(sizeof(refractiveIndex3) == sizeof(photonEnergy));

  G4MaterialPropertiesTable *SMPT2 = new G4MaterialPropertiesTable();
  SMPT2->AddProperty("EFFICIENCY", photonEnergy, efficiencyIndex2, nEntries);
  SMPT2->AddProperty("REFLECTIVITY", photonEnergy, refractiveIndex3, nEntries);
  SMPT2->AddProperty("TRANSMITTANCE", photonEnergy, refractiveIndex3, nEntries);
  OpSurface2->SetMaterialPropertiesTable(SMPT2);

  //G4LogicalBorderSurface *Surface2 =
  //new G4LogicalBorderSurface("Surface2", PhysVol_LS, PhysVol_absorb, OpSurface2);
  new G4LogicalBorderSurface("Surface2", PhysVol_LS, PhysVol_glass, OpSurface2);

  G4OpticalSurface *OpSurface3 = new G4OpticalSurface("OpSurface3");
  OpSurface3->SetModel(glisur);
  OpSurface3->SetPolish(1);
  //OpSurface3->SetType(dielectric_dielectric);
  //OpSurface3->SetFinish(polished);

  G4MaterialPropertiesTable *SMPT3 = new G4MaterialPropertiesTable();
  SMPT3->AddProperty("TRANSMITTANCE", photonEnergy, efficiencyIndex2, nEntries);

  OpSurface3->SetMaterialPropertiesTable(SMPT3);
  new G4LogicalBorderSurface("Surface3", PhysVol_LS, world, OpSurface3);
  // ==============================================================
  //                      return the world volume
  // ==============================================================
  return world;
}
